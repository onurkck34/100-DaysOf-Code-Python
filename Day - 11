sum(iterable, /, start=0)
Sums start and the items of an iterable from left to right and returns the total.
The iterableâ€™s items are normally numbers, and the start value is not allowed to be a string.

For some use cases,
there are good alternatives to sum().
The preferred, fast way to concatenate a sequence of strings is by calling ''.join(sequence).
To add floating point values with extended precision, see math.fsum().
To concatenate a series of iterables, consider using itertools.chain().

List Methods
Here are some other common list methods.

list.append(elem) -- adds a single element to the end of the list. Common error: does not return the new list, just modifies the original.
list.insert(index, elem) -- inserts the element at the given index, shifting elements to the right.
list.extend(list2) adds the elements in list2 to the end of the list. Using + or += on a list is similar to using extend().
list.index(elem) -- searches for the given element from the start of the list and returns its index. Throws a ValueError if the element does not appear (use "in" to check without a ValueError).
list.remove(elem) -- searches for the first instance of the given element and removes it (throws ValueError if not present)
list.sort() -- sorts the list in place (does not return it). (The sorted() function shown later is preferred.)
list.reverse() -- reverses the list in place (does not return it)
list.pop(index) -- removes and returns the element at the given index. Returns the rightmost element if index is omitted (roughly the opposite of append()).
Notice that these are *methods* on a list object, while len() is a function that takes the list (or string or whatever) as an argument.
